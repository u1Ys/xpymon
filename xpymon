#!/usr/bin/env python3

import io
import os
import re
import subprocess
import time

from Xlib import X, display

import x11util

COLOR_TBL = (
    (100, os.getenv('THEME_COLOR', 'aquamarine1')),
    (20, 'orange'),
    (10, 'firebrick1'),
)

UPDATE_INTERVAL = 1
BATTERY_WARN_THRESH = .05


class Status():
    def __init__(self):
        self.status = None

    def __str__(self):
        return str(self.status)

    def update(self):
        NotImplemented

    def _extract_from_stream(self, stream,
                             column=0, atype=str,
                             patterns=[], ignore=None):
        def extract_pattern(line, matches):
            for i, pattern in enumerate(patterns):
                if matches[i]:
                    continue
                regexp, n, atype = pattern['regexp'], \
                    pattern.get('n', 1), pattern.get('type', str)
                m = re.search(regexp, line)
                if m:
                    matches[i] = atype(m.group(n))

        if patterns:
            matches = [pattern.get('type', str)() for pattern in patterns]
        for line in stream:
            line = line.rstrip()
            # skip ignore case
            if ignore is not None and re.search(ignore, line):
                continue
            if patterns:
                extract_pattern(line, matches)
            else:
                fields = line.split()
                return atype(fields[column])
        return matches

    def _extract_field_from_file(self, file, atype=str, patterns=[], **kargs):
        try:
            f = open(file)
        except FileNotFoundError:
            return [pattern.get('type', str)() for pattern in patterns] if patterns else atype()
        return self._extract_from_stream(f, atype=atype, patterns=patterns, **kargs)

    def _extract_field_from_cmd(self, args, **kargs):
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        return self._extract_from_stream(io.TextIOWrapper(proc.stdout), **kargs)


class TimeStatus(Status):
    def update(self):
        clock = time.strftime('%Y/%m/%d(%a) %H:%M:%S')
        self.status = clock


class CPUStatus(Status):
    def __str__(self):
        return 'CPU{:3d}% {:3.1f}GHz {}{:.3}C'.format(int(self.loadavg * 100), self.cpufreq / 1000,
                                                      '*' if self.fanrpm else ' ',
                                                      self.coretemp / 1000)

    def _update_cpu_status(self):
        self.loadavg = self._extract_field_from_file('/proc/loadavg', atype=float)
        matches = self._extract_field_from_file('/proc/cpuinfo',
                                                patterns=[{'regexp': r'MHz[\:\s]*([\.\d]+)', 'type': float}])
        self.cpufreq = matches[0]

    def _update_coretemp_status(self):
        direxp = r'/sys/devices/platform/coretemp.*/hwmon/hwmon*/temp*_input'
        coretemps = [self._extract_field_from_file(f, atype=int)
                     for f in subprocess.getoutput(f'ls {direxp}').split('\n')]
        # MEMO: may cause zero division error if no 'direxp' file
        self.coretemp = sum(coretemps) / len(coretemps)

        direxp = '/sys/devices/platform/thinkpad_hwmon/hwmon/hwmon*/fan*_input'
        # MEMO: cause error if 'direxp' matches multiple file
        self.fanrpm = self._extract_field_from_file(subprocess.getoutput(f'ls {direxp}'), atype=int)

    def update(self):
        self._update_cpu_status()
        self._update_coretemp_status()


class PowerStatus(Status):
    def __str__(self):
        return 'PW{}{:3d}% {:02d}:{:02d} {:5.2f}W'.format(
            '*' if self.ac_online else ' ',
            int(self.remain_ratio * 100),
            *self._second_to_hour_minute(self.remain_seconds),
            self.consumption)

    def _second_to_hour_minute(self, second):
        """Convert SECONDS to hours and minutes."""
        hour = int(second / 3600)
        minute = int(second / 60) % 60
        if hour > 99:
            hour, minute = 99, 99
        return hour, minute

    def update(self):
        self.ac_online = self._extract_field_from_file('/sys/class/power_supply/AC/online', atype=int)
        # assume AC power if battery status is not available
        if self.ac_online is None:
            self.ac_online = True

        v = {'energy_full': 0, 'energy_now': 0, 'power_now': 0}
        dir_ = '/sys/class/power_supply/BAT0'
        for key in v.keys():
            n = self._extract_field_from_file('{}/{}'.format(dir_, key),
                                              atype=int)
            if n:
                v[key] += n
        self.remain_ratio = v['energy_now'] / max(v['energy_full'], 1e-10)
        self.remain_seconds = v['energy_now'] * 3600 / max(v['power_now'], 1e-10)
        self.consumption = v['power_now'] / 1000000


class VolumeStatus(Status):
    def __str__(self):
        return '{}VOL{}{:3d}%'.format('*' if self.exsist_mplayer else '-',
                                      '*' if self.toggle == "on" else '-',
                                      self.volume)

    def update(self):
        matches = self._extract_field_from_cmd(['amixer', 'get', 'Master'],
                                               patterns=[{'regexp': r'\[(\d+)%\]', 'type': int},
                                                         {'regexp': r'\[(\w+)\]'}])
        self.volume = matches[0]
        self.toggle = matches[1]
        self.exsist_mplayer = subprocess.getoutput('pidof mplayer')


class _IFaceStatus(Status):
    def _update_iface_and_addr(self):
        """Look for all available network interface excluding loopback device,
        and identify the first non-local network interface and its associated
        IP address."""
        self.iface, self.v4addr, self.v6addr = self._extract_field_from_cmd(
            ['ip', '-oneline', 'addr'],
            patterns=[{'regexp': r'^\d+: *(\w+)'},
                      {'regexp': r'inet ([0-9.]+)'},
                      {'regexp': r'inet6 ([0-9a-f:]+)\/\d+ scope global'}],
            ignore=r'(127.0.0.1|::1/128)')
        if not self.v4addr:
            self.v4addr = '---.---.---.---'
        if not self.v6addr:
            self.v6addr = '::'


class NetStatus(_IFaceStatus):
    def __init__(self):
        self.last_iface = None
        self._init_stats()
        self.last_time = time.time()

    def __str__(self):
        tx_base, tx_unit = self._convert_to_si_unit(self.tx_rate)
        rx_base, rx_unit = self._convert_to_si_unit(self.rx_rate)
        return '{:5} {:15} TX{:5.2f}{} RX{:5.2f}{}'.format(
            self.iface,
            '/'.join([self.v4addr, self.v6addr]),
            tx_base, tx_unit, rx_base, rx_unit)

    def update(self):
        self._update_iface_and_addr()
        # reset statistics when interface is changed
        if self.iface and self.iface != self.last_iface:
            self.last_iface = self.iface
            self._init_stats()
        self._update_stats()

    def _init_stats(self):
        self.tx_bytes = self.rx_bytes = 0
        self.tx_rate = self.rx_rate = None

    def _update_stats(self):
        def exponential_moving_average(currnet, last, alpha=.95):
            if last is None:
                return 0
            return (1 - alpha) * currnet + alpha * last

        tx_bytes, rx_bytes = self._extract_field_from_cmd(['/sbin/ifconfig', self.iface],
                                                          patterns=[{'regexp': r'TX.+bytes (\d+)', 'type': int},
                                                                    {'regexp': r'RX.+bytes (\d+)', 'type': int}])
        elapsed = time.time() - self.last_time
        self.tx_rate = exponential_moving_average(
            (tx_bytes - self.tx_bytes) * 8 / elapsed, self.tx_rate)
        self.tx_bytes = tx_bytes
        self.rx_rate = exponential_moving_average(
            (rx_bytes - self.rx_bytes) * 8 / elapsed, self.rx_rate)
        self.rx_bytes = rx_bytes
        self.last_time = time.time()

    def _convert_to_si_unit(self, val):
        """Represent a numeric value VALUE in SI (System International) unit.
        Return a tuple of the base number and the unit string."""
        base = val
        for unit in [' ', 'K', 'M', 'G', 'T', 'P']:
            if base <= 100:
                return base, unit
            base /= 1000


class WirelessInterfaceStatus(_IFaceStatus):
    def __str__(self):
        return '{:5}{} {:8} {:4.1f}M {:5} {:5.1f}dBm'.format(
            self.iface, '*' if self.supplicant else ' ',
            self.essid if self.essid else '--------',
            self.rate if self.rate else 0,
            self.quality if self.quality else '--/--',
            self.level if self.level else 0)

    def update(self):
        self._update_iface_and_addr()
        self.essid, self.rate, self.quality, self.level = self._extract_field_from_cmd(
            ['/sbin/iwconfig', self.iface], patterns=[{'regexp': r'ESSID:"(.+?)"'},
                                                      {'regexp': r'Bit Rate=([\d.]+)', 'type': float},
                                                      {'regexp': r'Link Quality=(\S+)'},
                                                      {'regexp': r'Signal level=(\S+)', 'type': float}])
        self.supplicant = subprocess.getoutput('pidof wpa_supplicant')


class VscreenNumberStatus(Status):
    def __str__(self):
        return f'VSCREEN {self.vscreen_num}'

    def update(self):
        self.vscreen_num = self._extract_field_from_file('/tmp/wm_vscreen_num')


class Window():
    def __init__(self):
        self.power_status = PowerStatus()
        self.statuses = [WirelessInterfaceStatus(), NetStatus(), self.power_status,
                         CPUStatus(), VolumeStatus(), VscreenNumberStatus(), TimeStatus()]

        self._create_window()

        self.status_str = ''
        self.update()

    def _create_window(self):
        self.display = display.Display()
        font = x11util.load_font(self.display)
        self.screen = self.display.screen()
        self.width, height = self.screen.width_in_pixels, x11util.FONT_HEIGHT
        self.window = x11util.create_window(self.display, self.screen,
                                            width=self.width, height=height,
                                            x=0, y=0)
        self.gcs = x11util.create_gcs(self.display, self.screen, self.window, font)

    def _update_status(self):
        [status.update() for status in self.statuses]

    def _update_string(self):
        self.last_status_str = self.status_str
        self.status_str = ' | '.join(map(str, self.statuses))

    def _update_color(self):
        self.color, self.reverse, self.bgcolor = COLOR_TBL[0][1], False, 'black'
        if not self.power_status.ac_online:
            return
        for percentage, name in COLOR_TBL:
            if self.power_status.remain_ratio <= percentage / 100:
                self.color = name
        is_blink = self.power_status.remain_ratio <= BATTERY_WARN_THRESH
        self.reverse = is_blink and int(time.time()) & 1
        self.bgcolor = self.color if self.reverse else 'black'

    def _draw(self):
        x11util.clear(self.window)
        self.window.fill_rectangle(self.gcs[self.bgcolor][100], 0, 0, 1920, 1080)
        x11util.draw_str(self.display, self.screen, self.window, self.gcs,
                         self.status_str,
                         col=int((self.width / x11util.FONT_WIDTH - len(self.status_str)) / 2),
                         row=0,
                         color=self.color,
                         reverse=self.reverse)
        x11util.flush(self.display, self.screen)
        self.window.configure(stack_mode=X.Above)

    def update(self):
        self._update_status()
        self._update_string()
        self._update_color()
        if self.status_str == self.last_status_str:
            return
        self._draw()


def main():
    window = Window()
    while True:
        time.sleep(UPDATE_INTERVAL)
        window.update()


if __name__ == "__main__":
    main()
